/*
 * Interfaz.java
 *
 * Created on 02-sep-2009, 11:15:34
 *
 * @author mireia
 */
package Damas;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import javax.swing.LookAndFeel;
import javax.swing.UIManager;
import java.util.ArrayList;

public class Interfaz extends javax.swing.JFrame
{
	static final String resourcesPath = "";
	Juego m_nuevoJuego;
	boolean fichaSeleccionada;
	boolean fichaMovimiento;
	int posi;
	int posj;
	int px;
	int py;
	Movimiento movimientoSugerido;

	/** Creates new form Interfaz */
	public Interfaz(Juego juego)
	{
		// Establecemos el estilo de la interfaz de usuario según la plataforma en la que se ejecute.
		String base = "com.sun.java.swing.plaf.";
		String[] plataformas = {"apple.laf.AquaLookAndFeel", "com.apple.laf.AquaLookAndFeel", base + "mac.MacLookAndFeel", base + "nimbus.NimbusLookAndFeel", base + "windows.WindowsLookAndFeel", base + "gtk.GTKLookAndFeel"};
		for (int i = 0; i < plataformas.length; i++)
		{
			try
			{
				UIManager.setLookAndFeel((LookAndFeel) Class.forName(plataformas[i]).newInstance());
				i = plataformas.length;
			}
			catch (Exception e) {}
		}
		
		initComponents();
		
		m_nuevoJuego = juego;
		jSpinnerTiempoStateChanged(null);
		jSpinnerMinimoStateChanged(null);
		jSpinnerMaximoStateChanged(null);
		jRadioButtonAlfaBetaItemStateChanged(null);
		fichaSeleccionada = false;
		fichaMovimiento = false;
		posi = -1;
		posj = -1;
		px = -1;
		py = -1;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel(true);
        jButtonHH = new javax.swing.JButton();
        jButtonHM = new javax.swing.JButton();
        jButtonMM = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jRadioButtonAlfaBeta = new javax.swing.JRadioButton();
        jRadioButtonSSS = new javax.swing.JRadioButton();
        jRadioButtonMiniMax = new javax.swing.JRadioButton();
        jSpinnerMinimo = new javax.swing.JSpinner();
        jSpinnerMaximo = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jSpinnerTiempo = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButtonLEEME = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Práctica FIA 2009/2010 - Cristian Aguilera Martínez");
        setBackground(new java.awt.Color(23, 23, 23));
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(48, 48, 48));
        jPanel2.setFocusable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setEnabled(false);
        jPanel1.setFocusable(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 400));
        jPanel1.setRequestFocusEnabled(false);
        jPanel1.setVerifyInputWhenFocusTarget(false);
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 398, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 398, Short.MAX_VALUE)
        );

        jButtonHH.setText("Humano/Humano");
        jButtonHH.setFocusable(false);
        jButtonHH.setRequestFocusEnabled(false);
        jButtonHH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHHActionPerformed(evt);
            }
        });

        jButtonHM.setText("Humano/Máquina");
        jButtonHM.setFocusable(false);
        jButtonHM.setMaximumSize(new java.awt.Dimension(126, 27));
        jButtonHM.setMinimumSize(new java.awt.Dimension(126, 27));
        jButtonHM.setPreferredSize(new java.awt.Dimension(126, 27));
        jButtonHM.setRequestFocusEnabled(false);
        jButtonHM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHMActionPerformed(evt);
            }
        });

        jButtonMM.setText("Máquina/Máquina");
        jButtonMM.setFocusable(false);
        jButtonMM.setRequestFocusEnabled(false);
        jButtonMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMMActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(74, 74, 74));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setFocusable(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel4.setForeground(new java.awt.Color(254, 254, 254));
        jLabel4.setText("Puntuación:");
        jLabel4.setFocusable(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel2.setForeground(new java.awt.Color(254, 254, 254));
        jLabel2.setText("Blancas:");
        jLabel2.setFocusable(false);
        jLabel2.setMaximumSize(null);
        jLabel2.setMinimumSize(null);
        jLabel2.setPreferredSize(null);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel3.setForeground(new java.awt.Color(254, 254, 254));
        jLabel3.setText("Negras:");
        jLabel3.setFocusable(false);
        jLabel3.setMaximumSize(null);
        jLabel3.setMinimumSize(null);
        jLabel3.setPreferredSize(null);

        jLabel5.setForeground(new java.awt.Color(254, 254, 254));
        jLabel5.setText("0");
        jLabel5.setFocusable(false);

        jLabel6.setForeground(new java.awt.Color(254, 254, 254));
        jLabel6.setText("0");
        jLabel6.setFocusable(false);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel4))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(40, 40, 40)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(36, 36, 36)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextArea1.setBackground(new java.awt.Color(254, 254, 254));
        jTextArea1.setColumns(15);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(3);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setDoubleBuffered(true);
        jTextArea1.setFocusable(false);
        jTextArea1.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Sugerir movimiento");
        jButton1.setToolTipText("Marca en el tablero qué ficha deberías mover");
        jButton1.setEnabled(false);
        jButton1.setFocusable(false);
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSugerencia(evt);
            }
        });

        buttonGroup1.add(jRadioButtonAlfaBeta);
        jRadioButtonAlfaBeta.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButtonAlfaBeta.setSelected(true);
        jRadioButtonAlfaBeta.setText("Alfa-beta");
        jRadioButtonAlfaBeta.setFocusable(false);
        jRadioButtonAlfaBeta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAlfaBetaItemStateChanged(evt);
            }
        });

        buttonGroup1.add(jRadioButtonSSS);
        jRadioButtonSSS.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButtonSSS.setText("SSS*");
        jRadioButtonSSS.setFocusable(false);
        jRadioButtonSSS.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonSSSItemStateChanged(evt);
            }
        });

        buttonGroup1.add(jRadioButtonMiniMax);
        jRadioButtonMiniMax.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButtonMiniMax.setText("Minimax");
        jRadioButtonMiniMax.setFocusable(false);
        jRadioButtonMiniMax.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonMiniMaxItemStateChanged(evt);
            }
        });

        jSpinnerMinimo.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(4), Integer.valueOf(1), null, Integer.valueOf(1)));
        jSpinnerMinimo.setDoubleBuffered(true);
        jSpinnerMinimo.setFocusable(false);
        jSpinnerMinimo.setRequestFocusEnabled(false);
        jSpinnerMinimo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMinimoStateChanged(evt);
            }
        });

        jSpinnerMaximo.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(10), Integer.valueOf(1), null, Integer.valueOf(1)));
        jSpinnerMaximo.setFocusable(false);
        jSpinnerMaximo.setRequestFocusEnabled(false);
        jSpinnerMaximo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaximoStateChanged(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(254, 254, 254));
        jLabel1.setText("Rango de niveles a explorar:");

        jSpinnerTiempo.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.25f), null, Float.valueOf(0.25f)));
        jSpinnerTiempo.setFocusable(false);
        jSpinnerTiempo.setRequestFocusEnabled(false);
        jSpinnerTiempo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerTiempoStateChanged(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(254, 254, 254));
        jLabel7.setText("Tiempo máximo para el cálculo:");

        jLabel8.setForeground(new java.awt.Color(254, 254, 254));
        jLabel8.setText("segs");

        jLabel9.setForeground(new java.awt.Color(254, 254, 254));
        jLabel9.setText("Algoritmo de búsqueda:");

        jButtonLEEME.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 13));
        jButtonLEEME.setText("LÉEME");
        jButtonLEEME.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonLEEMEMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jButtonHH, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 240, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonHM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 240, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonMM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 240, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(25, 25, 25)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jButton1)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel2Layout.createSequentialGroup()
                                        .add(12, 12, 12)
                                        .add(jSpinnerTiempo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(4, 4, 4)
                                        .add(jLabel8))
                                    .add(jPanel2Layout.createSequentialGroup()
                                        .add(12, 12, 12)
                                        .add(jSpinnerMinimo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jSpinnerMaximo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jPanel2Layout.createSequentialGroup()
                                        .add(12, 12, 12)
                                        .add(jRadioButtonMiniMax)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jRadioButtonAlfaBeta)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jRadioButtonSSS))
                                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                        .add(jLabel9)
                                        .add(jLabel7)
                                        .add(jLabel1)
                                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                                        .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jButtonLEEME)))))))
                .add(15, 15, 15))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jButtonMM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jButtonHM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jButtonHH, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(31, 31, 31)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2Layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(35, 35, 35)
                        .add(jLabel9)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jRadioButtonAlfaBeta)
                            .add(jRadioButtonSSS)
                            .add(jRadioButtonMiniMax))
                        .add(18, 18, 18)
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jSpinnerMinimo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jSpinnerMaximo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(jLabel7)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jSpinnerTiempo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel8))))
                .add(25, 25, 25)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(jButtonLEEME))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jMenu2.setText("Archivo");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Nuevo juego");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItem1.setText("Salir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar2.add(jMenu2);

        setJMenuBar(jMenuBar2);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	//Función que se ejecuta al pulsar el botón Humano/Humano
    private void jButtonHHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHHActionPerformed
		String opcion = (String) JOptionPane.showInputDialog(this, "¿Qué fichas moverán primero?", "", JOptionPane.INFORMATION_MESSAGE,
        null, new String[] {"Blancas", "Negras"}, "Blancas");
		
		repaint();

		if (opcion != null)
		{
			//Debe indicar que el modo de juego es Humano/Humano
			//Esa modalidad es la modalidad 1
			m_nuevoJuego.setJuego(1);
			if (opcion.equals("Negras"))
				m_nuevoJuego.cambiaTurno();
			jButton1.setEnabled(true);
			jButtonHH.setEnabled(false);
			jButtonHM.setEnabled(false);
			jButtonMM.setEnabled(false);
		}
}//GEN-LAST:event_jButtonHHActionPerformed

	//Función que se ejecuta al pulsar el botón Humano/Máquina
    private void jButtonHMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHMActionPerformed
		String opcion = (String) JOptionPane.showInputDialog(this, "¿Qué fichas moverán primero?", "", JOptionPane.INFORMATION_MESSAGE,
        null, new String[] {"Blancas", "Negras"}, "Blancas");

		repaint();

		if (opcion != null)
		{
			//Debe indicar que el modo de juego es Humano/Máquina
			//Esa modalidad es la modalidad 2
			m_nuevoJuego.setJuego(2);
			jButton1.setEnabled(true);
			jButtonHH.setEnabled(false);
			jButtonHM.setEnabled(false);
			jButtonMM.setEnabled(false);
			if (opcion.equals("Negras"))
			{
				m_nuevoJuego.cambiaTurno();
				m_nuevoJuego.controlJuego();
			}
		}
}//GEN-LAST:event_jButtonHMActionPerformed

	//Función que se ejecuta al pulsar el botón Máquina/Máquina
    private void jButtonMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMMActionPerformed
		String opcion = (String) JOptionPane.showInputDialog(this, "¿Qué fichas moverán primero?", "", JOptionPane.INFORMATION_MESSAGE,
        null, new String[] {"Blancas", "Negras"}, "Blancas");

		repaint();

		if (opcion != null)
		{
			//Debe indicar que el modo de juego es Máquina/Máquina
			//Esa modalidad es la modadlidad 3
			m_nuevoJuego.setJuego(3);
			if (opcion.equals("Negras"))
				m_nuevoJuego.cambiaTurno();
			jButtonHH.setEnabled(false);
			jButtonHM.setEnabled(false);
			jButtonMM.setEnabled(false);

			while (m_nuevoJuego.getJugando())
			{
				// Esto se quita,, poque ya se puede controlar cuanto tiempo tarda en calcular.
				/*try
				{
					Thread.sleep(500);
				}
				catch (InterruptedException ex)
				{
				}*/

				m_nuevoJuego.controlJuego();

				paint(getGraphics());
			}
		}
}//GEN-LAST:event_jButtonMMActionPerformed

	//Esta función selecciona e inserta la ficha en el tablero cuando el jugador hace clic
    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
		float anchoCasilla, altoCasilla;
		int columna, fila;

		//Únicamente tiene que mover la ficha si es el turno del jugador humano:
		//En caso que el turno sea del jugador 1 en el caso de Humano/Máquina
		//o el cualquier caso si estamos en el modo Humano/Humano
		//y además únicamente, si el juego ha empezado.
		if (m_nuevoJuego.getJugando())
		{
			if (m_nuevoJuego.getModo() == 1 || (m_nuevoJuego.getModo() == 2 && m_nuevoJuego.getTurno() == 1))
			{
				//Calcula el tamaño de cada casilla
				anchoCasilla = (jPanel1.getSize().width) / m_nuevoJuego.m_tablero.tamaño();
				altoCasilla = (jPanel1.getSize().height) / m_nuevoJuego.m_tablero.tamaño();

				//Calcula la casilla más cercana en la que se encuentra el ratón
				columna = (int) ((evt.getX()) / anchoCasilla);
				fila = (int) ((evt.getY()) / altoCasilla);

				//Si hace el segundo clic para dejar la ficha
				if (fichaSeleccionada)
				{
					//Si el jugador vuelve a dejar la ficha donde estaba
					if (columna == posj && fila == posi)
					{
						//Vuelve a dejar la ficha donde estaba y no cambia de turno porque el jugador no ha movido
						m_nuevoJuego.m_tablero.cambiarCasilla(columna, fila, m_nuevoJuego.getTurno());
						posi = -1;
						posj = -1;
						fichaSeleccionada = false;
						fichaMovimiento = false;
						repaint();
						return;
					}

					//Si selecciona otra casilla, comprueba que la ficha, antes seleccionada, puede hacer ese movimiento
					if (m_nuevoJuego.m_tablero.movimientoValido(posi, posj, fila, columna, m_nuevoJuego.getTurno()) != -1)
					{
						fichaSeleccionada = false;
						fichaMovimiento = false;

						m_nuevoJuego.jugadaHumano(posi, posj, columna, fila, m_nuevoJuego.getTurno());

						if (m_nuevoJuego.getJugando())
						{
							m_nuevoJuego.cambiaTurno();

							//Si el juego aun no ha terminado y está en modo de juego 2
							//Humano/Máquina después de poner ficha el humano debe ponerlo la máquina
							if (m_nuevoJuego.getModo() == 2)
							{
								//Dibuja el tablero con la ficha del jugador 1
								paint(getGraphics());
								//repaint();
								m_nuevoJuego.controlJuego();
							}
						}
						//Ha terminado el movimiento, reinicializa los valores
						posi = -1;
						posj = -1;
						movimientoSugerido = null;
						repaint();
						return;
					}
					else
					{
						m_nuevoJuego.m_mensaje = 4;
						repaint();
					}

				}

				//Si no hay ninguna ficha seleccionada, es el primer clic de la tirada
				if (!fichaSeleccionada)
				{
					//Si la ficha es correcta, es decir, pertenece al jugador
					if (m_nuevoJuego.m_tablero.obtenerCasilla(columna, fila) == m_nuevoJuego.getTurno())
					{
						//Comprueba si esa ficha puede hacer un movimiento correcto
						if (m_nuevoJuego.m_tablero.movimientoPosible(columna, fila, m_nuevoJuego.getTurno()) != -1)
						{
							//Borra la ficha de su posición
							m_nuevoJuego.m_tablero.cambiarCasilla(columna, fila, 0);
							m_nuevoJuego.m_mensaje = 1;
							repaint();
							fichaSeleccionada = true;
							posi = fila;
							posj = columna;
						}
						else
						{
							m_nuevoJuego.m_mensaje = 5;
							repaint();
						}
					}
				}
			}
		}

    }//GEN-LAST:event_jPanel1MouseClicked

	//Opción "Nuevo Juego" del menú Archivo
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
		//Llama a la función que limpia el tablero y establece los parámetros iniciales
		m_nuevoJuego.reiniciarJuego();
		jButton1.setEnabled(false);
		movimientoSugerido = null;
		repaint();
		jButtonHH.setEnabled(true);
		jButtonHM.setEnabled(true);
		jButtonMM.setEnabled(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

	//Opción "Salir" del menú Archivo
	private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem2ActionPerformed
	{//GEN-HEADEREND:event_jMenuItem2ActionPerformed
		System.exit(0);
	}//GEN-LAST:event_jMenuItem2ActionPerformed

	private void jButtonSugerencia(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jButtonSugerencia
	{//GEN-HEADEREND:event_jButtonSugerencia
		JugadorMaquina jugadorMaquina = new JugadorMaquina(m_nuevoJuego.getTurno());
		jugadorMaquina.m_tablero = new Tablero(m_nuevoJuego.m_tablero);
		if (fichaSeleccionada)
			jugadorMaquina.m_tablero.cambiarCasilla(posj, posi, 1);
		jugadorMaquina.isDone(false);
		jugadorMaquina.m_movimiento = null;

		//Se crea e inicia el thread para que el jugador máquina calcule la jugada.
		Thread myThread = new Thread(jugadorMaquina);
		myThread.start();

		//Se espera al thread como mucho el tiempo específicado en m_tiempoMaximo.
		long timeStart = System.currentTimeMillis();
		long elapsed = 0;

		while (!jugadorMaquina.isDone() && (elapsed < m_nuevoJuego.m_tiempoMaximo))
		{
			elapsed = System.currentTimeMillis() - timeStart;
		}

		// Si no ha finalizado el thread, se mata.
		if (elapsed >= m_nuevoJuego.m_tiempoMaximo && !jugadorMaquina.isDone())
		{
			myThread.stop();
			myThread = null;
			System.out.println("   [ABORTADO] Se mata el hilo porque se excedió el tiempo límite de cálculo.");

			// Comprobamos si el hilo ha llegado a calcular algún hilo; si no, elegimos el primer movimiento y fuera.
			if (jugadorMaquina.m_movimiento == null)
			{
				System.out.println("   [AVISO] Se abortó el hilo antes de calcular al menos un movimiento. Se elegirá el primer movimiento posible.");
				ArrayList<Movimiento> movimientos = jugadorMaquina.m_tablero.movimientosPosibles(jugadorMaquina.m_jugador);
				jugadorMaquina.m_movimiento = movimientos.get(0).swap();
			}
		}

		movimientoSugerido = jugadorMaquina.m_movimiento;
		repaint();
	}//GEN-LAST:event_jButtonSugerencia

	private void jSpinnerTiempoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerTiempoStateChanged
		try
		{
			float tiempoMaximo = (Float) jSpinnerTiempo.getValue();
			m_nuevoJuego.m_tiempoMaximo = (int) (tiempoMaximo*1000);
		}
		catch (Exception e)
		{
			System.err.println(e.getMessage());
		}
	}//GEN-LAST:event_jSpinnerTiempoStateChanged

	private void jSpinnerMinimoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMinimoStateChanged
		int nivelMinimo = (Integer) jSpinnerMinimo.getValue();
		int nivelMaximo = (Integer) jSpinnerMaximo.getValue();

		if (nivelMinimo > nivelMaximo)
		{
			jSpinnerMaximo.setValue(new Integer(nivelMinimo));
		}
		JugadorMaquina.NIVEL_MINIMO = nivelMinimo;
	}//GEN-LAST:event_jSpinnerMinimoStateChanged

	private void jSpinnerMaximoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaximoStateChanged
		int nivelMinimo = (Integer) jSpinnerMinimo.getValue();
		int nivelMaximo = (Integer) jSpinnerMaximo.getValue();

		if (nivelMinimo > nivelMaximo)
		{
			jSpinnerMinimo.setValue(new Integer(nivelMaximo));
		}
		JugadorMaquina.NIVEL_MAXIMO = nivelMaximo;
	}//GEN-LAST:event_jSpinnerMaximoStateChanged

	private void jRadioButtonMiniMaxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonMiniMaxItemStateChanged
		if (jRadioButtonMiniMax.isSelected())
			JugadorMaquina.ALGORITMO = JugadorMaquina.MINIMAX;
		else
			if (jRadioButtonAlfaBeta.isSelected())
				JugadorMaquina.ALGORITMO = JugadorMaquina.ALFABETA;
			else
				if (jRadioButtonSSS.isSelected())
					JugadorMaquina.ALGORITMO = JugadorMaquina.SSS;
	}//GEN-LAST:event_jRadioButtonMiniMaxItemStateChanged

	private void jRadioButtonAlfaBetaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAlfaBetaItemStateChanged
		jRadioButtonMiniMaxItemStateChanged(evt);
	}//GEN-LAST:event_jRadioButtonAlfaBetaItemStateChanged

	private void jRadioButtonSSSItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonSSSItemStateChanged
		jRadioButtonMiniMaxItemStateChanged(evt);
	}//GEN-LAST:event_jRadioButtonSSSItemStateChanged

	private void jButtonLEEMEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonLEEMEMouseClicked
		String leeme = "";
		leeme += "- En el apartado 5 de la documentación se indica la línea y el\n";
		leeme += "  fichero en el que se encuentra los algoritmos implementados y\n";
		leeme += "  los métodos importantes.";
		leeme += "\n\n";
		leeme += "- Se debe indicar un nivel mínimo y un nivel máximo de exploración\n";
		leeme += "  del árbol. También se debe indicar un tiempo de cálculo máximo.";
		leeme += "\n\n";
		leeme += "- Si los niveles son muy altos o el tiempo es muy pequeño y no da\n";
		leeme += "  tiempo a encontrar al menos un movimiento, se escogerá el primer\n";
		leeme += "  movimiento posible.";
		leeme += "\n\n";
		leeme += "- Si el nivel mínimo a explorar coincide con el nivel máximo a\n";
		leeme += "  explorar, sólo se calcula el algoritmo para ese nivel y en el\n";
		leeme += "  tiempo indicado.";
		JOptionPane.showMessageDialog(this, leeme, "Léeme", JOptionPane.INFORMATION_MESSAGE);
	}//GEN-LAST:event_jButtonLEEMEMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonHH;
    private javax.swing.JButton jButtonHM;
    private javax.swing.JButton jButtonLEEME;
    private javax.swing.JButton jButtonMM;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButtonAlfaBeta;
    private javax.swing.JRadioButton jRadioButtonMiniMax;
    private javax.swing.JRadioButton jRadioButtonSSS;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerMaximo;
    private javax.swing.JSpinner jSpinnerMinimo;
    private javax.swing.JSpinner jSpinnerTiempo;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

	//Dibuja el tablero de juego.
	@Override
	@SuppressWarnings("static-access")
	public void paint(Graphics g)
	{
		EscribeMensaje();
		EscribePuntuacion();

		//Como estamos sobreescribiendo la función llamamos a la función padre.
		super.paint(g);
		g = jPanel1.getGraphics();

		//Dibuja el tablero.
		Toolkit t = getToolkit();
		Image imagen = t.getImage(getClass().getResource("tablero.png"));
		g.drawImage(imagen, 0, 0, this);

		//Dibuja cada una de las casillas
		for (int i = 0; i < m_nuevoJuego.m_tablero.tamaño(); i++)
		{
			for (int j = 0; j < m_nuevoJuego.m_tablero.tamaño(); j++)
			{
				//Si la casilla pertenece al jugador 1, es una ficha normal blanca
				if (m_nuevoJuego.m_tablero.obtenerCasilla(i, j) == 1)
				{
					dibujarFicha(g, i, j, "blanca");
				}
				else //Si la casilla pertenece al jugador 2, es una ficha normal negra
				if (m_nuevoJuego.m_tablero.obtenerCasilla(i, j) == 2)
				{
					dibujarFicha(g, i, j, "negra");
				}
			}
		}
		//También se dibuja la ficha seleccionada, ya sea blanca o negra.
		if (fichaSeleccionada)
			dibujarFicha(g, posj, posi, "seleccionada");

		// Si hay algún movimiento sugerido, se dibuja también.
		if (movimientoSugerido != null)
			dibujarSugerencia (g, movimientoSugerido);
	}

	/**
	 * Dibuja una ficha blanca
	 * @param g
	 * @param i
	 * @param j
	 */
	public void dibujarFicha(Graphics g, int i, int j, String color)
	{
		float alturaTablero, anchuraTablero;
		float anchoCasilla, altoCasilla;

		anchuraTablero = jPanel1.getSize().width;
		alturaTablero = jPanel1.getSize().height;

		g = jPanel1.getGraphics();

		//Calcula el tamaño que ocupará cada casilla a patir del tamaño del tablero.
		anchoCasilla = (anchuraTablero) / m_nuevoJuego.m_tablero.tamaño();
		altoCasilla = (alturaTablero) / m_nuevoJuego.m_tablero.tamaño();

		// Dibujamos la imagen.
		Toolkit t = getToolkit();
		Image imagen = t.getImage(getClass().getResource(color + ".png"));
		g.drawImage(imagen, (int) anchoCasilla*i, (int)altoCasilla*j, this);
	}

	/**
	 * Dibuja el movimiento sugerido.
	 * @param g
	 * @param movimiento
	 */
	public void dibujarSugerencia(Graphics g, Movimiento movimiento)
	{
		float alturaTablero, anchuraTablero;
		float anchoCasilla, altoCasilla;

		anchuraTablero = jPanel1.getSize().width;
		alturaTablero = jPanel1.getSize().height;

		g = jPanel1.getGraphics();

		//Calcula el tamaño que ocupará cada casilla a patir del tamaño del tablero.
		anchoCasilla = (anchuraTablero) / m_nuevoJuego.m_tablero.tamaño();
		altoCasilla = (alturaTablero) / m_nuevoJuego.m_tablero.tamaño();

		// Dibujamos la imagen.
		Toolkit t = getToolkit();
		Image imagen = t.getImage(getClass().getResource("sugerencia.png"));
		g.drawImage(imagen, (int) anchoCasilla*movimiento.m_inicial.m_py, (int)altoCasilla*movimiento.m_inicial.m_px, this);
		g.drawImage(imagen, (int) anchoCasilla*movimiento.m_final.m_py, (int)altoCasilla*movimiento.m_final.m_px, this);
	}

	/**
	 * Escribe el mensaje en la parte superior de la pantalla
	 */
	public void EscribeMensaje()
	{
		jTextArea1.setCursor(java.awt.Cursor.getDefaultCursor());
		switch (m_nuevoJuego.m_mensaje)
		{
			case 0:
				jTextArea1.setText("Selecciona un modo de juego.");
				jTextArea1.setForeground(java.awt.Color.BLACK);

				break;
			case 1:
				if (m_nuevoJuego.getTurno() == 1)
				{
					jTextArea1.setText("Turno de las blancas.");
				}
				else
				{
					jTextArea1.setText("Turno de las negras.");
				}
				jTextArea1.setForeground(java.awt.Color.BLACK);
				break;
			case 2:
				jTextArea1.setText("Han ganado las blancas.");
				jTextArea1.setForeground(java.awt.Color.GREEN);
				break;
			case 3:
				jTextArea1.setText("Han ganado las negras.");
				jTextArea1.setForeground(java.awt.Color.GREEN);
				break;
			case 4:
				jTextArea1.setText("Ese movimiento no es correcto.");
				jTextArea1.setForeground(java.awt.Color.RED);
				break;
			case 5:
				jTextArea1.setText("Esa ficha no tiene ningún movimiento posible.");
				jTextArea1.setForeground(java.awt.Color.RED);
				break;
			case 6:
				jTextArea1.setText("¡Empate!");
				jTextArea1.setForeground(java.awt.Color.BLUE);
				break;
			default:
				jTextArea1.setText(" ");
				break;
		}
	}

	/**
	 * Escribe la puntuación del juego en la parte derecha de la ventana
	 */
	public void EscribePuntuacion()
	{
		//m_nuevoJuego.calcularPuntos();
		jLabel5.setText(m_nuevoJuego.m_totalB + "");
		jLabel6.setText(m_nuevoJuego.m_totalN + "");
	}
}
