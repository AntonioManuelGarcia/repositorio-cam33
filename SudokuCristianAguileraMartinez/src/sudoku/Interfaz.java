/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Interfaz.java
 *
 * Created on 29-sep-2009, 17:23:51
 */
package sudoku;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import javax.swing.JFileChooser;
import javax.swing.LookAndFeel;
import javax.swing.UIManager;
import java.io.BufferedWriter;
import java.io.FileWriter;

/**
 *
 * @author mireia
 */
public class Interfaz extends javax.swing.JFrame
{
	//Indica si está cargado un sudoku
	boolean sudoku;
	//Indica si se ha seleccionado una casilla
	boolean seleccion;
	//Indica la fila y columna de la casilla seleccionada
	int fila;
	int columna;
	//Contiene el tablero de juego
	Tablero m_nuevoTablero;
	//Crea un jugador que es quien resuelve el sudoku, quien contiene la función FC
	Jugador jugador;
	// Indica qué números están mal colocados en el tablero.
	Integer[] incorrectas;

	/** Creates new form Interfaz */
	public Interfaz(Tablero tablero)
	{

		String base = "com.sun.java.swing.plaf.";
		String[] plataformas =
		{
			"apple.laf.AquaLookAndFeel", "com.apple.laf.AquaLookAndFeel", base + "mac.MacLookAndFeel", base + "nimbus.NimbusLookAndFeel", base + "windows.WindowsLookAndFeel", base + "gtk.GTKLookAndFeel"
		};
		for (int i = 0; i < plataformas.length; i++)
		{
			try
			{
				UIManager.setLookAndFeel((LookAndFeel) Class.forName(plataformas[i]).newInstance());
				i = plataformas.length;
			}
			catch (Exception e)
			{
			}
		}

		//Inicializa las variables del juego
		sudoku = false;
		jugador = new Jugador();
		m_nuevoTablero = tablero;
		incorrectas = null;
		initComponents();

		jTable1.setValueAt("Correcto", 0, 0);
		jTable1.setValueAt("Incorrecto", 1, 0);
		jTable1.setValueAt("Sin solución", 2, 0);
		jTable1.setValueAt("No terminado", 3, 0);
		jTable1.setValueAt("Se ha encontrado una solución para el tablero.", 0, 1);
		jTable1.setValueAt("Los valores iniciales no cumplen alguna restricción.", 1, 1);
		jTable1.setValueAt("(Sólo al pulsar \"Forward Checking\") No hay solución con los valores iniciales.", 2, 1);
		jTable1.setValueAt("(Sólo al pulsar \"Comprobar\") Faltan casillas por rellenar.", 3, 1);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jFileChooser1 = new javax.swing.JFileChooser();
        jPanelTab = new javax.swing.JPanel();
        jPanelNum = new javax.swing.JPanel();
        jButBack = new javax.swing.JButton();
        jButFC = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Práctica 2 FIA 09/10");
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jPanelTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanelTab.setForeground(new java.awt.Color(255, 255, 255));
        jPanelTab.setPreferredSize(new java.awt.Dimension(315, 315));
        jPanelTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelTabMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelTabLayout = new org.jdesktop.layout.GroupLayout(jPanelTab);
        jPanelTab.setLayout(jPanelTabLayout);
        jPanelTabLayout.setHorizontalGroup(
            jPanelTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 311, Short.MAX_VALUE)
        );
        jPanelTabLayout.setVerticalGroup(
            jPanelTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 311, Short.MAX_VALUE)
        );

        jPanelNum.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelNum.setForeground(new java.awt.Color(255, 255, 255));
        jPanelNum.setToolTipText("También funcionan los números del teclado y las flechas.");
        jPanelNum.setPreferredSize(new java.awt.Dimension(105, 105));
        jPanelNum.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelNumMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelNumLayout = new org.jdesktop.layout.GroupLayout(jPanelNum);
        jPanelNum.setLayout(jPanelNumLayout);
        jPanelNumLayout.setHorizontalGroup(
            jPanelNumLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 101, Short.MAX_VALUE)
        );
        jPanelNumLayout.setVerticalGroup(
            jPanelNumLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 101, Short.MAX_VALUE)
        );

        jButBack.setText("Comprobar");
        jButBack.setFocusable(false);
        jButBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButBackActionPerformed(evt);
            }
        });

        jButFC.setText("Forward Checking");
        jButFC.setFocusable(false);
        jButFC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButFCActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(35, 35));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 31, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 31, Short.MAX_VALUE)
        );

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+1));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(" ");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Aplicar AC3 (ver tooltip)");
        jCheckBox1.setToolTipText("Si no se aplica AC3 y el sudoku no tiene solución, es posible que Forward Checking no termine en un tiempo razonable.");
        jCheckBox1.setFocusable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Salida", "Descripción"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setDoubleBuffered(true);
        jTable1.setFocusable(false);
        jTable1.setRequestFocusEnabled(false);
        jTable1.setRowSelectionAllowed(false);
        jTable1.setShowVerticalLines(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setMinWidth(115);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(115);

        jLabel2.setText("Posibles salidas pulsar \"Forward Checking\" o \"Comprobar\":");

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Cargar Sudoku");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Borrar Sudoku");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar Sudoku");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jPanelTab, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(38, 38, 38)
                                .add(jPanelNum, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jButFC, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jButBack, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                                    .add(jCheckBox1)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 298, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(12, 12, 12))))))
                    .add(jLabel2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanelTab, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelNum, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(jCheckBox1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButFC)
                        .add(18, 18, 18)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jButBack, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(28, 28, 28)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * Botón Forward checking de la interfaz
	 * Llama a la función que resuelve el sudoku por FC y comprueba si la solución es correcta
	 * @param evt
	 */
    private void jButFCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButFCActionPerformed
		//Llama a la función ejecutarFC de la clase Jugador
		jugador.ejecutarFC(m_nuevoTablero, jCheckBox1.isSelected());
		
		//Comprueba si la solución dada es correcta
		if (m_nuevoTablero.TableroCorrecto())
		{
			jLabel1.setText("¡CORRECTO!");
			jLabel1.setForeground(new Color(25, 180, 30));
		}
		else
		{
			incorrectas = m_nuevoTablero.TableroCorrectoParcialmente();
			if (incorrectas == null)
			{
				jLabel1.setText("¡SIN SOLUCIÓN!");
				jLabel1.setForeground(new Color(255, 115, 0));
			}
			else
			{
				jLabel1.setText("¡INCORRECTO!");
				jLabel1.setForeground(new Color(225, 10, 10));
			}
		}

		seleccion = false;
		repaint();
    }//GEN-LAST:event_jButFCActionPerformed

	/**
	 * Se ejecuta cuando se pulsa la opción del Menú, Cargar Sudoku
	 * @param evt
	 */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

		//Para abrir el diálogo para seleccionar el fichero a cargar
		JFileChooser jfile = new JFileChooser();
		int ret = jfile.showOpenDialog(Interfaz.this);

		//Si se ha seleccionado un fichero
		if (jfile.getSelectedFile() != null)
		{
			//Llama a la función para cargar el sudoku
			m_nuevoTablero.setFichero(jfile.getSelectedFile().getAbsoluteFile());
			m_nuevoTablero.CargarTablero();
			incorrectas = null;
			repaint();
			//Indica que hay un sudoku cargado
			sudoku = true;
		}

		jLabel1.setText("");

    }//GEN-LAST:event_jMenuItem1ActionPerformed

	/**
	 * Captura el evento cuando se hace clic para seleccionar una casilla
	 * @param evt
	 */
    private void jPanelTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelTabMouseClicked

		int anchoCasilla, altoCasilla;

		//Calcula el tamaño de cada casilla
		anchoCasilla = jPanelTab.getSize().width / 9;
		altoCasilla = jPanelTab.getSize().height / 9;

		//Calcula en qué casilla se ha hecho clic con el ratón
		columna = (int) ((evt.getX()) / anchoCasilla);
		fila = (int) ((evt.getY()) / altoCasilla);

		//Indica que hay una casilla seleccionada
		seleccion = true;
		repaint();

    }//GEN-LAST:event_jPanelTabMouseClicked

	/**
	 * Captura el evento cuando se hace clic para seleccionar un número
	 * @param evt
	 */
    private void jPanelNumMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelNumMouseClicked

		int anchoCasilla, altoCasilla;
		int i, j;
		int valor;

		if (seleccion)
		{
			//Calcula el tamaño de cada casilla
			anchoCasilla = jPanelNum.getSize().width / 3;
			altoCasilla = jPanelNum.getSize().height / 3;

			//Calcula en qué casilla se ha hecho clic con el ratón
			j = (int) ((evt.getX()) / anchoCasilla);
			i = (int) ((evt.getY()) / altoCasilla);

			//Calcula el número que hay en esa casilla
			if (i < 2)
			{
				valor = (i + 1) * (i + 1) + j;
			}
			else
			{
				valor = 7 + j;
			}

			//Introduce en el sudoku, en la casilla seleccionada, ese número
			m_nuevoTablero.setCasilla(valor, fila, columna);
			m_nuevoTablero.setColor(Color.DARK_GRAY, fila, columna);

			if (incorrectas != null)
			{
				if ((incorrectas[0] == fila && incorrectas[1] == columna) || (incorrectas[2] == fila && incorrectas[3] == columna))
				{
					incorrectas = null;
				}
			}

			//Indica que ya no hay ninguna casilla seleccionada
			seleccion = false;
			repaint();
		}

    }//GEN-LAST:event_jPanelNumMouseClicked

	/**
	 * Cuando se pulsa la opción del Menú BorrarSudoku
	 * @param evt
	 */
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
		m_nuevoTablero.LimpiarTablero();
		incorrectas = null;
		jLabel1.setText("");
		repaint();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

	/**
	 * Para borrar una casilla. Si se pulsa al botón para borrar una casilla
	 * @param evt
	 */
    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
		//Si hay una casilla seleccionada pone su valor a 0 (vacía)
		if (seleccion)
		{
			m_nuevoTablero.setCasilla(0, fila, columna);
			m_nuevoTablero.setColor(Color.DARK_GRAY, fila, columna);
			seleccion = false;
			repaint();
		}
    }//GEN-LAST:event_jPanel1MouseClicked

	/**
	 * Se ejecuta al pulsar el botón Comprobar. Comprueba si el sudoku está solucionado correctamente
	 * @param evt
	 */
    private void jButBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButBackActionPerformed
		if (m_nuevoTablero.TableroCorrecto())
		{
			jLabel1.setText("¡CORRECTO!");
			jLabel1.setForeground(new Color(25, 180, 30));
		}
		else
		{
			incorrectas = m_nuevoTablero.TableroCorrectoParcialmente();
			if (incorrectas == null)
			{
				jLabel1.setText("¡NO TERMINADO!");
				jLabel1.setForeground(new Color(255, 115, 0));
			}
			else
			{
				jLabel1.setText("¡INCORRECTO!");
				jLabel1.setForeground(new Color(225, 10, 10));
			}
		}
		repaint();
    }//GEN-LAST:event_jButBackActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

		String salida = "";
		for (int i = 0; i < 9; i++)
		{
			String auxiliar = "";
			for (int j = 0; j < 9; j++)
			{
				auxiliar += m_nuevoTablero.getCasilla(i, j) + " ";
			}
			auxiliar = auxiliar.trim();
			salida += auxiliar + "\n";
		}

		//Para abrir el diálogo para seleccionar el fichero a cargar
		JFileChooser jfile = new JFileChooser();
		int ret = jfile.showSaveDialog(Interfaz.this);

		//Si se ha seleccionado un fichero
		if (jfile.getSelectedFile() != null)
		{
			try
			{
				jfile.getSelectedFile().createNewFile();

				BufferedWriter out = new BufferedWriter(new FileWriter(jfile.getSelectedFile().getAbsoluteFile()));
				out.write(salida);
				out.close();
			}
			catch (Exception e)
			{
			}
			repaint();
		}
    }//GEN-LAST:event_jMenuItem3ActionPerformed

	private void formKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_formKeyReleased
	{//GEN-HEADEREND:event_formKeyReleased
		switch (evt.getKeyCode())
		{
			case KeyEvent.VK_DELETE:
				jMenuItem2ActionPerformed(null);
				break;

			case KeyEvent.VK_RIGHT:
				if (seleccion)
				{
					columna = Math.min(8, columna+1);
				}
				else
				{
					seleccion=true;
					if (fila >= 9 || fila < 0)
						fila=0;
					if (columna >= 9 || columna < 0)
						columna=0;
				}
				repaint();
				break;

			case KeyEvent.VK_DOWN:
				if (seleccion)
				{
					fila = Math.min(8, fila+1);
				}
				else
				{
					seleccion=true;
					if (fila >= 9 || fila < 0)
						fila=0;
					if (columna >= 9 || columna < 0)
						columna=0;
				}
				repaint();
				break;

			case KeyEvent.VK_LEFT:
				if (seleccion)
				{
					columna = Math.max(0, columna-1);
				}
				else
				{
					seleccion=true;
					if (fila >= 9 || fila < 0)
						fila=0;
					if (columna >= 9 || columna < 0)
						columna=0;
				}
				repaint();
				break;

			case KeyEvent.VK_UP:
				if (seleccion)
				{
					fila = Math.max(0, fila-1);
					repaint();
				}
				else
				{
					seleccion=true;
					if (fila >= 9 || fila < 0)
						fila=0;
					if (columna >= 9 || columna < 0)
						columna=0;
				}
				repaint();
				break;

			case KeyEvent.VK_ENTER:
				jButBackActionPerformed(null);
				break;

			default:
				int tecla = evt.getKeyCode();
				if (KeyEvent.VK_0 <= evt.getKeyCode() && evt.getKeyCode() <= KeyEvent.VK_9)
				{
					tecla = evt.getKeyCode() - KeyEvent.VK_0 + KeyEvent.VK_NUMPAD0;
				}
				if (KeyEvent.VK_NUMPAD0 <= tecla && tecla <= KeyEvent.VK_NUMPAD9 && seleccion)
				{
					m_nuevoTablero.setCasilla(1 + tecla - KeyEvent.VK_NUMPAD1, fila, columna);
					m_nuevoTablero.setColor(Color.DARK_GRAY, fila, columna);

					if (incorrectas != null)
					{
						if ((incorrectas[0] == fila && incorrectas[1] == columna) || (incorrectas[2] == fila && incorrectas[3] == columna))
						{
							incorrectas = null;
						}
					}

					repaint();
					jLabel1.setText("");
				}
				break;
		}
	}//GEN-LAST:event_formKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButBack;
    private javax.swing.JButton jButFC;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelNum;
    private javax.swing.JPanel jPanelTab;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

	//Dibuja el tablero de juego.
	@Override
	@SuppressWarnings("static-access")
	public void paint(Graphics g)
	{
		String numero;
		int num;

		//Como estamos sobreescribiendo la función llamamos a la función padre.
		super.paint(g);
		g = jPanelTab.getGraphics();

		/*************************************************
		 * Dibuja el tablero del Sudoku
		 ************************************************/
		g.setColor(Color.BLACK);

		//Dibuja las líneas del tablero
		for (int i = 0; i <= 9; i++)
		{
			//Dibuja las líneas verticales
			g.drawLine(i * 35, 0, i * 35, 315);
			if (i % 3 == 0)
			{
				g.drawLine(i * 35 - 1, 0, i * 35 - 1, 315);
			}


			//Dibuja las líneas horizontales
			g.drawLine(0, i * 35, 315, i * 35);
			if (i % 3 == 0)
			{
				g.drawLine(0, i * 35 - 1, 315, i * 35 - 1);
			}

		}

		//Si se ha seleccionado alguna casilla, tiene que dibujar la casilla que se ha seleccionado
		//enmarcada en un recuadro rojo
		if (seleccion)
		{
			g.setColor(Color.RED);

			g.drawLine(columna * 35, fila * 35, (columna + 1) * 35, fila * 35);
			g.drawLine(columna * 35, fila * 35, columna * 35, (fila + 1) * 35);
			g.drawLine(columna * 35, (fila + 1) * 35, (columna + 1) * 35, (fila + 1) * 35);
			g.drawLine((columna + 1) * 35, fila * 35, (columna + 1) * 35, (fila + 1) * 35);

			//Para hacer la línea más gruesa
			g.drawLine(columna * 35, fila * 35 - 1, (columna + 1) * 35, fila * 35 - 1);
			g.drawLine(columna * 35 - 1, fila * 35, columna * 35 - 1, (fila + 1) * 35);
			g.drawLine(columna * 35, (fila + 1) * 35 - 1, (columna + 1) * 35, (fila + 1) * 35 - 1);
			g.drawLine((columna + 1) * 35 - 1, fila * 35, (columna + 1) * 35 - 1, (fila + 1) * 35);

		}


		//Dibuja los números del tablero
		//Define la fuente y su tamaño
		Font fuente = new Font("SansSerif", Font.BOLD, 30);
		g.setFont(fuente);

		//Dibuja todos los números
		for (int i = 0; i < 9; i++)
		{
			for (int j = 0; j < 9; j++)
			{
				if (m_nuevoTablero.getCasilla(i, j) != 0)
				{
					numero = "" + m_nuevoTablero.getCasilla(i, j);
					g.setColor(m_nuevoTablero.getColor(i, j));
					if (incorrectas != null)
					{
						if ((incorrectas[0] == i && incorrectas[1] == j) || (incorrectas[2] == i && incorrectas[3] == j))
						{
							g.setColor(new Color(225, 10, 10));
						}
					}

					g.drawString(numero, j * 35 + 5, (i + 1) * 34);
				}

			}
		}

		/***********************************************************
		 * Dibuja el panel de los números
		 **********************************************************/
		g = jPanelNum.getGraphics();

		for (int i = 1; i <= 2; i++)
		{
			//Dibuja las líneas verticales
			g.drawLine(i * 35, 0, i * 35, 105);

			//Dibuja las líneas horizontales
			g.drawLine(0, i * 35, 105, i * 35);
		}

		num = 1;
		g.setColor(Color.DARK_GRAY);
		g.setFont(fuente);
		//Dibuja los números en el panel de los números
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				numero = "" + num;
				g.drawString(numero, j * 35 + 6, (i + 1) * 33);
				num++;
			}
		}
	}
}
